{"version":3,"sources":["spacex.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_success","launch_year","react_default","a","createElement","className","classNames","text-success","text-danger","Link","to","concat","MissionKey","LAUNCHES_QUERY","gql","_templateObject","Launches","react","components_MissionKey","react_apollo_browser_umd","query","loading","error","data","console","log","launches","map","i","key","components_LaunchItem","React","Component","LAUNCH_QUERY","Launch_templateObject","Launch","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","match","params","parseInt","variables","rocket_name","rocket","rocket_type","spaceX","require","client","ApolloClient","uri","App","BrowserRouter","style","width","height","alt","src","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.129eba19.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spacex.9eb2515b.png\";","import React from 'react'\nimport classNames from 'classnames'\nimport {Link} from 'react-router-dom'\nconst LaunchItem = ({launch: {flight_number, mission_name, launch_success, launch_year}}) => (\n    <td className=\"card card-body container\">\n        <div className=\"row\">\n            <div className=\"col-md-9\">\n                Mission : <span  className={classNames({\n                            \"text-success\" : launch_success,\n                            \"text-danger\": !launch_success\n                            })}> <h4>{mission_name} </h4>  \n                        </span> \n                        <div></div>\n                Year : <span> <strong> {launch_year}</strong>  \n                        </span>           \n            </div>\n            <div className=\"col-md-3\">\n                            <Link to={`/launch/${flight_number}`}  >\n                                <button className=\"btn btn-primary\"> Launch Details </button>\n                            </Link>\n            </div>\n        </div>\n    </td>\n)\n   \nexport default LaunchItem","import React from 'react'\nconst MissionKey = () => \n    <div>\n        <span className=\"px-3 mr-2 bg-success\"/>= Success\n        <span className=\"px-3 mr-2 bg-danger ml-2\"/>= Fail\n    </div>\n\nexport default MissionKey ","import React, {Fragment} from 'react'\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo'\nimport LaunchItem from './LaunchItem'\nimport MissionKey from './MissionKey'\n\nconst LAUNCHES_QUERY = gql`\n    query LaunchesQuery {\n        launches {\n            flight_number\n            mission_name\n            launch_success\n            launch_year\n        }\n    }\n`\n\nclass Launches extends React.Component{\n    render(){\n        return(\n            <Fragment>\n                <h1 className=\"display-4 my-4\">Launches</h1>\n                <MissionKey/>\n                <Query query={LAUNCHES_QUERY}>\n                    {\n                        ({loading, error, data}) => {\n                            if(loading) return <h4>Loading...</h4>\n                            if(error) return   console.log(error);\n                            if(data) { return (\n                                <table className=\"table table-hover\">\n                                    <tbody>\n                                    {data.launches.map( (launch,i) => \n                                        <tr key={i} className=\"row mb-3\">\n                                             <LaunchItem launch={launch} />\n                                        </tr> \n                                    )}\n                                    </tbody>\n                                 </table>\n                            ) }\n                        }\n                    }\n                </Query>\n            </Fragment>\n        )\n    }\n}\n\nexport default Launches ","import React from 'react'\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo'\nimport classNames from 'classnames'\nimport {Link} from 'react-router-dom'\nconst LAUNCH_QUERY = gql`\n    query LaunchQuery($flight_number: Int!) {\n        launch(flight_number: $flight_number) { \n            flight_number\n            mission_name\n            launch_success\n            launch_year\n            rocket {\n                rocket_name\n                rocket_type\n            }\n        }\n    }\n`\nclass Launch extends React.Component {\n    constructor(props){\n        super()\n    }\n    render(){\n        let {flight_number} = this.props.match.params\n        flight_number = parseInt(flight_number)\n        return(\n            <div>\n               <Query query={LAUNCH_QUERY} variables={{flight_number}}>\n                   {({loading,error, data }) => {\n                        if(loading) return <h4>Loading...</h4>\n                        if(error) return   console.log(error);\n\n                        const {mission_name} = data.launch \n                        const {launch_year} = data.launch \n                        const {launch_success} = data.launch \n                        const {rocket_name} = data.launch.rocket\n                        const {rocket_type} = data.launch.rocket\n                    //   console.log(mission_name)\n                    //   console.log(rocket_name)\n                    return (\n                        <div className=\"card card-body display-4 my-3 ml-3\">\n                             <span className=\"text-dark\">Mission: {mission_name} - {launch_year}</span>\n                             <span className=\"text-primary\">Rocket: {rocket_name}</span>\n                             <span className=\"text-dark\">Rocket Type: {rocket_type}</span>\n                             <div className={classNames({\n                                 \"text-success\": launch_success,\n                                 \"text-danger\" : !launch_success\n                             })}>Success: {launch_success ? \"Yes\" : \"No\"}</div>\n                        </div>   \n                    )\n                                           \n                   } }\n               </Query>\n               <Link to=\"/\" className=\"btn btn-secondary ml-3\" >Back</Link>\n            </div>\n        )\n    }\n}\n\nexport default Launch","import React, { Component } from 'react'\nimport './App.css'\nimport ApolloClient  from 'apollo-boost'\nimport { ApolloProvider } from 'react-apollo'\nimport Launches from './components/Launches'\nimport Launch from './components/Launch'\n\nimport {BrowserRouter, Router, Route } from 'react-router-dom'\nconst spaceX = require('./spacex.png')\n\nconst client = new ApolloClient({\n  uri: \"/graphql\"\n})\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <BrowserRouter>\n          <div>\n            <img style={{width:\"100%\", height:\"300px\"}} alt=\"spaceX\" src={spaceX}/>\n            <Route exact path='/' component={Launches}/>\n            <Route exact path='/launch/:flight_number' component={Launch}/>\n          </div>\n        </BrowserRouter>\n        \n      </ApolloProvider>\n     \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}